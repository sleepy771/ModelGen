{
  "@Object": {
    "methods": [
      {
        "name": "newInstance",
        "variables": ["${L:args}"],
        "code": "new ${CLASS}(${args})",
        "m_type": "class"
      },
      {
        "name": "getClassDefinition",
        "m_type": "__undefined__"
      },
      {
        "name": "equals",
        "variables": ["$1"],
        "code": "${THIS} == $1",
        "m_type": "instance"
      },
      {
        "name": "hashCode",
        "m_type": "__undefined__"
      }
    ]
  },
  "@Comparable": {
    "methods": [
      {
        "name": "gt",
        "variables": ["$2"],
        "code": "${THIS} > $2",
        "m_type": "instance"
      },
      {
        "name": "ge",
        "variables": ["$2"],
        "code": "${THIS} >= $2",
        "m_type": "instance"
      },
      {
        "name": "eq",
        "variables": ["$2"],
        "code": "${THIS} == $2",
        "m_type": "instance"
      },
      {
        "name": "le",
        "variables": ["$2"],
        "code": "${THIS} <= $2",
        "m_type": "instance"
      },
      {
        "name": "lt",
        "variables": ["$2"],
        "code": "${THIS} < $2",
        "m_type": "instance"
      },
      {
        "name": "ne",
        "variables": ["$2"],
        "code": "${THIS} != $2",
        "m_type": "instance"
      }
    ]
  },
  "@String": {
    "methods": [
      {
        "name": "valueOf",
        "args_t": ["@me.sleepyprojects.modelgen.NumberDefinition"],
        "variables": ["$N"],
        "code": "((string) $N)",
        "m_type": "static"
      },
      {
        "name": "charAt",
        "variables": ["$N"],
        "code": "${THIS}[$N]",
        "m_type": "instance"
      },
      {
        "name": "indexOf",
        "variables": ["$S"],
        "code": "strpos(${THIS}, $S)",  // check order of haystack and needle
        "m_type": "instance"
      },
      {
        "name": "contains",
        "variables": ["$S"],
        "code": "strpos(${THIS}, $S) !== false",
        "m_type": "instance"
      },
      {
        "name": "startsWith",
        "variables": ["$S"],
        "code": "${THIS}.startsWith($S)",
        "m_type": "instance"
      },
      {
        "name": "endsWith",
        "variables": ["$S"],
        "code": "${THIS}.endsWith($S)",
        "m_type": "instance"
      }
    ]
  },
  "@Number": {
    "methods": [
      {
        "name": "valueOf",
        "variables": ["$S"],
        "code": "((${CLASS}) $S)",
        "m_type": "class"
      },
      {
        "name": "add",
        "variables": ["$2"],
        "code": "${THIS} + $2",
        "m_type": "instance"
      },
      {
        "name": "sub",
        "variables": ["$2"],
        "code": "${THIS} - $2",
        "m_type": "instance"
      },
      {
        "name": "mul",
        "variables": ["$2"],
        "code": "${THIS} * $2",
        "m_type": "instance"
      },
      {
        "name": "div",
        "variables": ["$2"],
        "code": "${THIS} / $2",
        "m_type": "instance"
      },
      {
        "name": "mod",
        "variables": ["$2"],
        "code": "${THIS} % $2",
        "m_type": "instance"
      },
      {
        "name": "fdiv",
        "variables": ["$2"],
        "code": "((float) ${THIS}) / $2",
        "m_type": "instance"
      }
    ]
  },
  "@DataStruct": {
    "methods": [
      {
        "name": "size",
        "code": "count(${THIS})",
        "m_type": "instance"
      },
      {
        "name": "contains",
        "variables": ["$1"],
        "code": "in_array($1, ${THIS})", // order
        "m_type": "instance"
      }
    ]
  },
  "@Collection": {
    "methods": [
      {
        "name": "add",
        "variables": ["$1"],
        "code": "${THIS}[] = $1",
        "m_type": "instance"
      },
      {
        "name": "remove",
        "variables": ["$1"],
        "code": [
          "if (($key = array_search($1, ${THIS}) !== false) {",
          "${TAB}unset(${THIS}[$key]);",
          "}"
        ],
        "m_type": "instance"
      },
      {
        "name": "removeAll",
        "variables": ["$1"],
        "code": [
          "foreach($1 as $item) {",
          "${TAB}if (($key = array_search($1, ${THIS}) !== false) {",
          "${TAB}${TAB}unset(${THIS[$key]);",
          "${TAB}}",
          "}"
        ],
        "m_type": "instance"
      },
      {
        "name": "addAll",
        "variables": ["$1"],
        "code": [
          "foreach ($1 as $item) {",
          "${TAB}${THIS}[] = $item;",
          "}"
        ],
        "m_type": "instance"
      }
    ]
  },
  "@List": {
    "methods": [
      {
        "name": "newInstance",
        "code": "array()"
      },
      {
        "name": "get",
        "variables": ["$1"],
        "code": "${THIS}[$1]",
        "m_type": "instance"
      }
    ]
  },
  "@Set": "__undefined__",
  "@Map": {
    "methods": [
      {
        "name": "newInstance",
        "code": "array()"
      },
      {
        "name": "get",
        "variables": ["$1"],
        "code": "${THIS}[$1]",
        "m_type": "instance"
      },
      {
        "name": "remove",
        "variables": ["$1"],
        "code": "unset(${THIS}[$1])",
        "m_type": "instance"
      },
      {
        "name": "put",
        "variables": ["$1", "$2"],
        "$code": "${THIS}[$1] = $2",
        "m_type": "instance"
      }
    ]
  }
}