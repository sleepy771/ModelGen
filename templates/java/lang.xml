<?xml version="1.0" encoding="UTF-8" ?>
<lang>
    <modifiers>
        <groups>
            <group id="visibility" order="1" scopes="type,method,field">
                <modifier id="public">public</modifier>
                <modifier id="protected">protected</modifier>
                <modifier id="package-protected" is-default="true"/>
                <modifier id="private">private</modifier>
            </group>
            <group id="scope" order="2" scopes="type,method,field,block">
                <modifier id="static">static</modifier>
            </group>
            <group id="inheritance" order="3" scopes="type,method">
                <modifier id="abstract">abstract</modifier>
            </group>
            <group id="concurrency" order="4" scopes="method,field,block">
                <modifier id="synchronized">synchronized</modifier>
            </group>
            <group id="mem-access" order="5" scopes="field,variable">
                <modifier id="volatile">volatile</modifier>
            </group>
            <group id="persistence" order="5" scopes="field">
                <modifier id="transient">transient</modifier>
            </group>
            <group id="mutability" order="6" scopes="type,method,field,variable">
                <modifier id="final">final</modifier>
            </group>
            <group id="external" order="7" scopes="method">
                <modifier id="native">native</modifier>
            </group>
        </groups>
    </modifiers>
    <scopes>
        <scope id="file"/>
        <scope id="class"/>
        <scope id="class-code"/>
        <scope id="init-block"/>
        <scope id="assign-code"/>
        <scope id="method"/>
        <scope id="method-code"/>
        <scope id="flow-code"/>
        <scope id="field"/>
        <scope id="arguments"/>
        <scope id="argument"/>
    </scopes>
    <templates>
        <template id="class" scope="file">
            <variables>
                <variable id="name" type="String"/>
                <variable id="modifiers" type="ModifiersDefinition"/>
                <variable id="supperClass" type="Meta"/>
                <variable id="interfaces" type="Meta[]"/>
                <variable id="code" type="ClassCodeDefinition"/>
            </variables>
            <velocity>
                #set($extends="")
                #if ($superclass)
                #set($extends=" extends ${superclass}")
                #end
                #set($implements="")
                #if ($interfaces)
                #foreach ($meta in $interfaces)
                #if ($implements.isEmpty())
                #set($implements=" implements ${meta}")
                #else
                #set($implements=$implements+", "+$meta)
                #end
                #end
                #end
                ${modifiers}class ${name}${extends}${implements} {${LN}${TAB}${code}${LN}}${LN}
            </velocity>
        </template>
        <template id="class-code" scope="class">
            <variables>
                <variable id="fields" type="FieldDefinition[]"/>
                <variable id="methods" type="MethodDefinition[]"/>
            </variables>
            <velocity>
                #if ($fields)
                #foreach($field in $fields)
                $field
                #end
                #end
                #if ($methods)
                ${LN}
                #foreach ($method in $methods)
                ${method}${LN}
                #end
                #end
            </velocity>
        </template>
        <template id="method" scope="class-code">
            <variables>
                <variable id="modifiers" type="ModifiersDefinition"/>
                <variable id="type" type="Meta"/>
                <variable id="name" type="String"/>
                <variable id="arguments" type="ArgumentsDefinition"/>
                <variable id="code" type="FlowCode"/>
            </variables>
            <velocity>
                ${modifiers}$type $name($arguments){${LN}${TAB}$code${LN}}${LN}${LN}
            </velocity>
        </template>
        <template  id="field" scope="class-code">
            <variables>
                <variable id="name" type="String"/>
                <variable id="modifiers" type="ModifiersDefinition"/>
                <variable id="type" type="Meta"/>
                <variable id="value" type="String"/> <!-- TODO this would change in future -->
            </variables>
            <velocity>
                #if ($value)
                #set($assign="${S}=${S}$value")
                #end
                ${modifiers}$type ${name}${assign};
            </velocity>
        </template>
        <template id="modifiers" scope="class,method,field,argument">
            <variables>
                <variable id="modifiers" type="Modifier[]"/>
            </variables>
            <velocity>
                #set($mods="")
                #foreach($mod in $modifiers)
                #set($mods=$mods + $mod + " ")
                #end
                $mods
            </velocity>
        </template>
        <template id="argument" scope="arguments">
            <variables>
                <variable id="modifiers" type="ModifiersDefinition"/>
                <variable id="type" type="Meta"/>
                <variable id="name" type="String"/>
            </variables>
            <velocity>
                ${modifiers}$type $name
            </velocity>
        </template>
        <template id="arguments" scope="method">
            <variables>
                <variable id="arguments" type="Argument[]"/>
            </variables>
            <velocity>
                #set($args="")
                #if($arguments)
                #foreach($arg in $arguments)
                #if($args.isEmpty())
                #set($args=$arg)
                #else
                #set($args=$args + ",$S" + $arg)
                #end
                #end
                #end
                $arguments
            </velocity>
        </template>
        <!--<template id="constructor" scope="class-code" extends="method">-->
            <!--<variables>-->
                <!--<variable id="name" type="Meta"/>-->
            <!--</variables>-->
        <!--</template>-->
        <!--<template id="constant" scope="class-code" extends="field">-->
            <!--<variables>-->
                <!--<variable id="modifiers" type="ModifierDefinition">-->
                    <!--<value>public</value>-->
                    <!--<value>static</value>-->
                    <!--<value>final</value>-->
                <!--</variable>-->
            <!--</variables>-->
        <!--</template>-->
        <template id="initializer" scope="class-code">
            <variables>
                <variable id="code" type="FlowCode"/>
                <variable id="modifiers" type="ModifiersDefinition"/>
            </variables>
            <velocity>
                ${modifiers}{${LN}${TAB}${code}${LN}}
            </velocity>
        </template>
        <template id="field-call" scope="flow-code">
            <variables>
                <variable id="instance" type="String"/>
                <variable id="name" type="String"/>
            </variables>
            <velocity>
                #if ($instance.isEmpty())
                #set($instance="this")
                #end
                ${instance}.${name}
            </velocity>
        </template>
        <template id="method-call" scope="flow-code">
            <variables>
                <variable id="instance" type="String"/>
                <variable id="name" type="String"/>
                <variable id="arguments" type="ArgumentsDefinition"/>
            </variables>
            <velocity>
                #if ($instance.isEmpty())
                #set($instance="this")
                #end
                ${instance}.${name}(${arguments})
            </velocity>
        </template>
        <!--<template id="assign" scope="flow-code, assign-code">-->
            <!--<velocity>-->
                <!--${assignee}${S}=${S}${assigner};-->
            <!--</velocity>-->
        <!--</template>-->
        <!--<template id="operation" scope="flow-code">-->
            <!--<velocity>-->
                <!--${operand1}${S}${operator}${S}${operand2}-->
            <!--</velocity>-->
        <!--</template>-->
        <!--<template id="flow-code" scope="method,initializer">-->

        <!--</template>-->
    </templates>
</lang>